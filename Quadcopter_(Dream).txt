# ----------------------------------------------------------------------------------------------------------------------------- #
# ____                                      __          __  __          ___                                                     #
#/\  _ `.                                  /\ \        /\ \/\ \        /\_ \                                                    #
#\ \ \/\ \  _ __    __     __      ___ ___ \ \/ ____   \ \ \_\ \    ___\//\ \     ___      __   _ __    __      ___ ___         #
# \ \ \ \ \/\`'__\/'__`\ /'__`\  /' __` __`\\/ /',__\   \ \  _  \  / __`\\ \ \   / __`\  /'_ `\/\`'__\/'__`\  /' __` __`\       #
#  \ \ \_\ \ \ \//\  __//\ \ \.\_/\ \/\ \/\ \ /\__, `\   \ \ \ \ \/\ \ \ \\_\ \_/\ \ \ \/\ \ \ \ \ \//\ \ \.\_/\ \/\ \/\ \      #
#   \ \____/\ \_\\ \____\ \__/.\_\ \_\ \_\ \_\\/\____/    \ \_\ \_\ \____//\____\ \____/\ \____ \ \_\\ \__/.\_\ \_\ \_\ \_\     #
#    \/___/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/ \/___/      \/_/\/_/\/___/ \/____/\/___/  \/___ \ \/_/ \/__/\/_/\/_/\/_/\/_/     #
#                                                                                          /\____/                              #
#                                                                                          \_/__/                               #
# ----------------------------------------------------------------------------------------------------------------------------- #
# Modeler Version: v5.1
# Date: 12/20/2018 @ 1621
# Holograms: 45
# Notes: 
# --------------------------------------------- #
@name Quadcopter
@persist Hologram:table Time [Parent Body ]:entity
@model models/sprops/rectangles/size_2_5/rect_18x18x3.mdl

if( first( ) ) {
    
    Parent = owner( )
    Parent = findPlayerByName( "Tug" )
    
    Hologram = table()
    Hologram[ "model", array ] = array("models/holograms/cube.mdl","models/hunter/blocks/cube025x025x025.mdl","models/hunter/blocks/cube025x025x025.mdl","models/hunter/tubes/tube2x2x025b.mdl","models/hunter/tubes/tube2x2x025b.mdl","models/hunter/tubes/tube2x2x025b.mdl","models/hunter/tubes/tube2x2x025b.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/sprops/trans/air/prop_5b_s.mdl","models/sprops/trans/air/prop_5b_s.mdl","models/sprops/trans/air/prop_5b_s.mdl","models/sprops/trans/air/prop_5b_s.mdl","models/sprops/trans/air/pcone_5b_s.mdl","models/sprops/trans/air/pcone_5b_s.mdl","models/sprops/trans/air/pcone_5b_s.mdl","models/sprops/trans/air/pcone_5b_s.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/sprops/trans/misc/shock_2.mdl","models/sprops/trans/misc/shock_2.mdl","models/sprops/trans/misc/shock_2.mdl","models/sprops/trans/misc/shock_2.mdl","models/jaanus/wiretool/wiretool_controlchip.mdl","models/jaanus/wiretool/wiretool_controlchip.mdl","models/cheeze/wires/cpu.mdl","models/cyborgmatt/capacitor_large.mdl","models/cyborgmatt/capacitor_large.mdl","models/cyborgmatt/capacitor_large.mdl","models/cheeze/wires/wireless_card.mdl","models/cheeze/wires/ram.mdl","models/cheeze/wires/ram.mdl","models/cheeze/wires/mini_chip.mdl","models/cheeze/wires/mini_chip.mdl","models/cheeze/wires/mini_chip.mdl","models/kobilica/transistor.mdl","models/kobilica/transistor.mdl","models/jaanus/wiretool/wiretool_gate.mdl","models/items/boxflares.mdl","models/items/boxflares.mdl","models/holograms/hq_rcube.mdl")
    Hologram[ "position", array ] = array(vec(0,0,50),vec(0,0,50),vec(0,0,50),vec(0,-8.1982,50),vec(0,8.1982,50),vec(8.1968,0,50),vec(-8.1968,0,50),vec(0,-8.1982,50),vec(0,8.1982,50),vec(8.1968,0,50),vec(-8.1968,0,50),vec(0,-8.1982,50),vec(0,8.1982,50),vec(8.1968,0,50),vec(-8.1968,0,50),vec(0,-8.1982,50),vec(0,8.1982,50),vec(8.1968,0,50),vec(-8.1968,0,50),vec(0,-8.1982,49.3994),vec(0,8.1982,49.3994),vec(8.1968,0,49.3994),vec(-8.1968,0,49.3994),vec(0,0,48.5986),vec(0,0,48.5986),vec(0,0,48.5986),vec(0,0,48.5986),vec(1.9819,1.3604,50.2881),vec(1.9819,-1.3604,50.2881),vec(0.5605,-1.8604,50.2881),vec(0.9912,-0.8701,50.2881),vec(0.9912,-0.2695,50.2881),vec(0.9912,0.3311,50.2881),vec(-0.02,2.3135,51.1475),vec(0.4404,0.6416,50.2783),vec(0.1802,0.6416,50.2783),vec(-2.2422,-2.2314,50.2881),vec(-2.2422,-1.54,50.2881),vec(-2.2422,-0.8301,50.2881),vec(-2.1621,2.2725,50.5176),vec(1.0313,1.502,50.5176),vec(-1.4712,0.7422,50.2881),vec(-0.8408,-1.5605,50.3369),vec(-1.2412,-1.5605,50.3369),vec(0,0,50.8008))
    Hologram[ "angle", array ] = array(ang(0,0,0),ang(0,45,0),ang(0,-45,0),ang(0,45,0),ang(0,-135,0),ang(0,135,0),ang(0,-45,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(90,0,0),ang(89.9999,0,0),ang(89.9999,0,0),ang(89.9999,0,0),ang(0,45,0),ang(0,45,0),ang(0,45,0),ang(0,45,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(90,0,0),ang(90,90,0),ang(90,-180,0),ang(90,-90,0),ang(0,-180,0),ang(0,-180,0),ang(0,-180,0),ang(0,-180,0),ang(0,-180,0),ang(0,-179.9999,0),ang(0,-180,90),ang(0,-180,0),ang(0,-180,0),ang(0,-180,0),ang(0,-180,0),ang(0,-179.9999,0),ang(0,0,0),ang(0,0,0),ang(0,-180,0),ang(0,90,0),ang(0,90,0),ang(0,-180,-180))
    Hologram[ "scale", array ] = array(vec(0.44,0.44,0.05),vec(1,0.04,0.04),vec(1,0.04,0.04),vec(0.125,0.125,0.05),vec(0.125,0.125,0.05),vec(0.125,0.125,0.05),vec(0.125,0.125,0.05),vec(0.03,0.03,0.03),vec(0.03,0.03,0.03),vec(0.03,0.03,0.03),vec(0.03,0.03,0.03),vec(0.28,0.28,0.28),vec(0.28,0.28,0.28),vec(0.28,0.28,0.28),vec(0.28,0.28,0.28),vec(0.25,0.25,0.25),vec(0.25,0.25,0.25),vec(0.25,0.25,0.25),vec(0.25,0.25,0.25),vec(0.075,0.075,0.15),vec(0.075,0.075,0.15),vec(0.075,0.075,0.15),vec(0.075,0.075,0.15),vec(0.48,0.48,0.48),vec(0.48,0.48,0.48),vec(0.48,0.48,0.48),vec(0.48,0.48,0.48),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.02,0.02,0.02),vec(0.02,0.02,0.02),vec(0.02,0.02,0.02),vec(0.3,0.3,0.3),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.3,0.3,0.3),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.475,0.475,0.2))
    Hologram[ "color", array ] = array(vec(90,90,90),vec(255,255,255),vec(255,255,255),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,0,0),vec(255,0,0),vec(255,0,0),vec(255,0,0),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    Hologram[ "alpha", array ] = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,50)
    Hologram[ "material", array ] = array("","","","phoenix_storms/fender_white","phoenix_storms/fender_white","phoenix_storms/fender_white","phoenix_storms/fender_white","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    Hologram[ "parent", array ] = array(1,1,1,1,1,1,1,1,1,1,1,8,9,10,11,8,9,10,11,8,9,10,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    
    function buffer( ) {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "model", array ]:count( ) - Next ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]) - vec(0,0,50),
                Hologram["scale", array][I, vector],
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(Hologram["color", array][I, vector],
                Hologram["alpha", array ][I,number]),
                Hologram["model", array][I, string]
            )
            holoMaterial(I, Hologram["material", array][I, string])
            holoParent(I, Hologram["parent", array][I, number])
            Hologram[ "next", number ] = I
        }
        if( Next < Hologram[ "model", array ]:count( ) ) { timer( "buffer", 0.1 ) } else {
            propSpawnUndo( 0 )
            Body = propSpawn( "models/props_phx/construct/glass/glass_plate1x1.mdl", entity():pos(), entity():angles(), 1 )
            Body:soundPlay("motor", 0, "vehicles/airboat/fan_blade_fullthrottle_loop1.wav")
            Body:setAlpha( 0 )
            Body:propFreeze( 0 )
            Body:setMass( 50000 )
            soundVolume( "motor", 0.15 )
            holoParent(1, Body)
            runOnTick( 1 )
        }
    } buffer( )
}

if( clk( "buffer" ) ) { buffer( ) } elseif( tickClk( ) ) {
    if( !Body:isValid() ) { reset() }
    local V = Parent:shootPos():distance( Body:pos() ) > 250 ? ( Parent:toWorld( vec(0,0,30) ) - Body:pos() ) / 20 : vec(0)
    soundPitch("motor", clamp(Body:vel():length() / 15 + 90, 110, 160))
    Body:applyTorque(Body:inertia() * (rotationVector(inv(quat(Body)) * quat(ang(Body:vel():x(), 0, -Body:vel():y()) / 20)) * 5 - Body:angVelVector()) * 20)
    Body:applyForce( ( Body:mass( ) * -propGravity() * tickInterval( ) - ( Body:vel() * Body:mass() ) / 20 ) + ( V * Body:mass( ) ) )
    Time = realtime( ) * 720
    for(I = 12, 15){
        holoAng(I, Body:toWorld(ang(90, Time * -1 ^ I, 0)))
        holoAng(I + 4 , Body:toWorld(ang(0, Time * -1 ^ I + 36, 0)))
    }
}



