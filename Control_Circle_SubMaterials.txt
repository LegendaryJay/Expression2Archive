@name Control Circle
@inputs 
@outputs Cannon Selected SelectMode MatList:array Scale AimToPlaneVec2:vector2 HoloI
@persist R Forward [HoloScaleUnits Eye]:vector EyeAngs:angle Scale Selected SelectMode SelectedMaterial:string HoloI CenterPos:vector LastSelected
@persist [Target]:entity MatList:array MatCount
@trigger 

if(first()){
    runOnTick(1)
    holoCreate(100)
    holoAlpha(100,0)
    holoCreate( 
        1,
        vec(),
        vec(0),
        ang(),
        vec(255),
        "models/holograms/hq_rcube.mdl"
    )
    
    
    R = 15
    Forward = 50
    
    function void endCircle(){
        for(I = 1, MatCount){
            holoAlpha(I,0)
        }
        holoAlpha(100, 0)
        SelectMode = 0
    }
    
    function void printMaterial(MatString:string){
        if (MatString != ""){
            printColor(vec(255),"Material: ", hsv2rgb(270, 1,1), "\"" + MatString + "\"")
        } else {
            printColor(vec(255), "No Material Selected")
        }
    }
    function string returnMaterial(SelectedIndex){
        if (SelectedIndex == 0){return ""}
        return MatList[SelectedIndex, string] 
    }
    function void makeSelection(){
        SelectedMaterial = returnMaterial(Selected)
        printMaterial(SelectedMaterial)
        SelectMode = 0
        endCircle()
        
    }
}

Me = owner()
Cannon = Me:weapon():type() == "weapon_physcannon"

if (Cannon){
    RClick = Me:keyAttack2()
    RClickChange = changed(RClick)
    
    LClick = Me:keyAttack1()
    LClickChange = changed(LClick)
    
        
    
    if (RClick & !RClickChange){
        endCircle()
        
        #Start Looking for Materials
        MatList = array()
        
        AimEnt = Me:aimEntity()
        TargetVec = vec()
        Target = noentity()
        
        if (AimEnt & AimEnt != Target){
            Target = AimEnt
            
            MatList = Target:getMaterials()
            TempMat = Target:getMaterial()
            
            if (TempMat){
                MatList:unshiftString(TempMat)
            }
            
        } elseif (!AimEnt) {
            Ranger = Me:eyeTrace()
            MatList = array( Ranger:hitTexture())
            TempPos = round(Me:pos())
        }

        MatCount = MatList:count()
        
        Eye = Me:eye()
        EyeAngs = Me:eyeAngles()
        
        CenterPos = Me:shootPos() + Eye * Forward
        
        if (Target & changed(Target)){
            hint(Target:toString() + " { " + MatCount + " } ", 4)
            while(MatCount > HoloI & holoCanCreate()){
                HoloI++
                holoCreate(HoloI)
                holoModel(HoloI,"models/holograms/hq_rcube.mdl" )
                holoColor(HoloI, vec(255))
                holoAlpha(HoloI, 0)
                
            } 
            Scale = min(6/MatCount, 1)
            HoloScaleUnits = holoEntity(1):boxSize() * Scale
        } elseif (!Target & MatCount == 1 & changed(returnMaterial(1))){
            hint(returnMaterial(1), 3)
            
        }
        
        
        if (MatCount != 1){
            holoMaterial(100, "editor/flat")
            for(I = 1, MatCount){    
                Percent = (I - 1)/MatCount
                Ang = 360 * Percent
                
                VecAng = toWorldPosAng( 
                    vec( 0, 0, R), 
                    ang(), 
                    CenterPos, 
                    EyeAngs:setRoll(Ang)
                )
        
                holoPos( I, VecAng[ 1, vector])
                holoAng( I, VecAng[ 2, angle] )
                holoMaterial(I, MatList[I, string])
                holoAlpha(I, 255)
    
            }
            
        } else {
            holoAlpha(100, 255)
            holoScale(100, vec(0.5))
            holoModel(100,"models/holograms/hq_rcube.mdl" )
            holoPos(100, CenterPos)
            holoMaterial(100, returnMaterial(1))
        }
        
        
    } elseif (!RClick & RClickChange){
        if (MatCount > 1){
            SelectMode = 1
        } elseif (MatCount == 1 | MatCount == 0){
            Selected = MatCount
            makeSelection()
        }
    }
    
    
    #setUp Menu
    if (SelectMode){
        Plane = rayPlaneIntersection(Me:shootPos(), Me:eye(), CenterPos, -Eye)
        AimToPlaneVec2 = vec2( shiftL(toLocal(
            Plane,
            ang(),
            CenterPos,
            EyeAngs 
        )))
        
        SelectionDistance = AimToPlaneVec2:length()

        MinRange = R * 0.8 - HoloScaleUnits:z() * 0.5
        MaxRange = R * 2
        
        LastSelected = Selected
        if ( inrange(SelectionDistance, MinRange, MaxRange)){
            holoAlpha(100, 255)
            SelectAng = AimToPlaneVec2:rotate(-90):toAngle()
            SelectAng = SelectAng + (sign(SelectAng) == -1) * 360
            
            
            Selected = round(MatCount * SelectAng/360) % MatCount + 1
            
            SelectedEnt = holoEntity(Selected)
            
            if (LastSelected != Selected){
                holoScale(LastSelected, vec(Scale))
                holoScale(Selected, vec(Scale * 1.1))
                hint(returnMaterial(Selected), 2)
                
                holoModel(100, "models/holograms/hq_cone.mdl")
                holoPos(100, SelectedEnt:toWorld(vec(0,0,-HoloScaleUnits:z() * 0.7)))
                holoAng(100, SelectedEnt:toWorld(ang(0,90,0)))
                holoScale(100, vec(Scale * 0.3))
            }
            
            

        } else {
            holoScale(LastSelected, vec(Scale))
            Selected = 0
            
            if (SelectionDistance < MinRange){
                holoAlpha(100, 100)
                holoModel(100, "models/holograms/hq_sphere.mdl")
                holoPos(100, Plane)
                holoScale(100, vec(Scale * 0.1))
            } elseif (SelectionDistance > MaxRange){
                holoScale(LastSelected, vec(Scale))
                holoAlpha(100, 0)
            }
        }

        if (LClick & LClickChange){
            makeSelection()    
        }
   
    }
} elseif (SelectMode) {
    endCircle()
}
